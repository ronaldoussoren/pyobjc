import Security
from PyObjCTools.TestSupport import TestCase


class Testcssmtype(TestCase):
    def test_unsuppported(self):
        self.assertFalse(hasattr(Security, "CSSM_INVALID_HANDLE"))
        self.assertFalse(hasattr(Security, "CSSM_FALSE"))
        self.assertFalse(hasattr(Security, "CSSM_TRUE"))
        self.assertFalse(hasattr(Security, "CSSM_OK"))
        self.assertFalse(hasattr(Security, "CSSM_MODULE_STRING_SIZE"))
        self.assertFalse(hasattr(Security, "CSSM_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_GUID"))
        self.assertFalse(hasattr(Security, "CSSM_KEY_HIERARCHY_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_KEY_HIERARCHY_INTEG"))
        self.assertFalse(hasattr(Security, "CSSM_KEY_HIERARCHY_EXPORT"))
        self.assertFalse(hasattr(Security, "CSSM_PVC_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_PVC_APP"))
        self.assertFalse(hasattr(Security, "CSSM_PVC_SP"))
        self.assertFalse(hasattr(Security, "CSSM_PRIVILEGE_SCOPE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_PRIVILEGE_SCOPE_PROCESS"))
        self.assertFalse(hasattr(Security, "CSSM_PRIVILEGE_SCOPE_THREAD"))
        self.assertFalse(hasattr(Security, "CSSM_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_CSSM"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_CSP"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_DL"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_CL"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_TP"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_AC"))
        self.assertFalse(hasattr(Security, "CSSM_SERVICE_KR"))
        self.assertFalse(hasattr(Security, "CSSM_SUBSERVICE_UID"))
        self.assertFalse(hasattr(Security, "CSSM_NOTIFY_INSERT"))
        self.assertFalse(hasattr(Security, "CSSM_NOTIFY_REMOVE"))
        self.assertFalse(hasattr(Security, "CSSM_NOTIFY_FAULT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTACH_READ_ONLY"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_DOMESTIC"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_FINANCIAL"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_KRLE"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_KRENT"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_SSL"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_AUTHENTICATION"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_KEYEXCH"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_MEDICAL"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_INSURANCE"))
        self.assertFalse(hasattr(Security, "CSSM_USEE_WEAK"))
        self.assertFalse(hasattr(Security, "CSSM_ADDR_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_ADDR_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_ADDR_URL"))
        self.assertFalse(hasattr(Security, "CSSM_ADDR_SOCKADDR"))
        self.assertFalse(hasattr(Security, "CSSM_ADDR_NAME"))
        self.assertFalse(hasattr(Security, "CSSM_NET_ADDRESS"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_UNSPECIFIED"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_LDAP"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_LDAPS"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_LDAPNS"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_X500DAP"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_FTP"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_FTPS"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_OCSP"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_CMP"))
        self.assertFalse(hasattr(Security, "CSSM_NET_PROTO_CMPS"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID__UNK_"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID__NLU_"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID__STAR_"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_A"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ACL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ALPHA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_B"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_BER"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_BINARY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_C"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_COMMENT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_D"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DATE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DB_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DB_EXEC_STORED_QUERY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DB_INSERT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DB_MODIFY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DB_READ"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DBS_CREATE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DBS_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DECRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DELTA_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DER"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DERIVE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DISPLAY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DO"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_DSA_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_E"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ELGAMAL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ENCRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ENTRY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_EXPORT_CLEAR"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_EXPORT_WRAPPED"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_G"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_GE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_GENKEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_HASH"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_HASHED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_HASHED_SUBJECT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_HAVAL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_IBCHASH"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_IMPORT_CLEAR"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_IMPORT_WRAPPED"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_INTEL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ISSUER"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ISSUER_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_K_OF_N"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEYHOLDER"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_L"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_LE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_LOGIN"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_LOGIN_NAME"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_MAC"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_MD2"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_MD2WITHRSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_MD4"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_MD5WITHRSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_N"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NAME"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NDR"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NHASH"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NOT_AFTER"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NOT_BEFORE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NULL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_NUMERIC"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_OBJECT_HASH"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ONE_TIME"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ONLINE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_OWNER"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_P"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PAM_NAME"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PGP"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PREFIX"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PRIVATE_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROMPTED_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROMPTED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROPAGATE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROTECTED_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROTECTED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROTECTED_PIN"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PUBLIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PUBLIC_KEY_FROM_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_Q"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RANGE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_REVAL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RIPEMAC"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RIPEMD"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RIPEMD160"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_ISO9796"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS1_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS1_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_PKCS1_SIG"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_RSA_RAW"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SDSIV1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SEQUENCE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SET"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SHA1WITHDSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SHA1WITHECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SHA1WITHRSA"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SIGN"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SIGNATURE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SIGNED_NONCE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SIGNED_SECRET"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SPKI"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SUBJECT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SUBJECT_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_TAG"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_THRESHOLD"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_TIME"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_URI"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_X509_ATTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_X509V1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_X509V2"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_X509V3"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_X9_ATTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_VENDOR_START"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_VENDOR_END"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_ELEMENT_DATUM"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_ELEMENT_SUBLIST"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_ELEMENT_WORDID"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_TYPE_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_TYPE_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_TYPE_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_LIST"))
        self.assertFalse(hasattr(Security, "CSSM_LIST_ELEMENT;"))
        self.assertFalse(hasattr(Security, "CSSM_TUPLE"))
        self.assertFalse(hasattr(Security, "CSSM_TUPLEGROUP"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_HASHED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_SIGNED_NONCE"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_SIGNED_SECRET"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_THRESHOLD"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLEGROUP"))
        self.assertFalse(hasattr(Security, "CSSM_MEMORY_FUNCS"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_X_509v1"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_X_509v2"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_X_509v3"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PGP"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_SPKI"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_SDSIv1"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_Intel"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_X_509_ATTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_X9_ATTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_TUPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ACL_ENTRY"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_MULTIPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_BER"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_DER"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_NDR"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_PGP"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_MULTIPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_ENCODING_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_CL_CUSTOM_CERT_ENCODING"))
        self.assertFalse(hasattr(Security, "CSSM_ENCODED_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_COMPLEX"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_OID_NAMED"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_TUPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_MULTIPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PARSE_FORMAT_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_CL_CUSTOM_CERT_PARSE_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_CL_CUSTOM_CERT_PARSE_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_PARSED_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_PAIR"))
        self.assertFalse(hasattr(Security, "CSSM_CERTGROUP_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_CERTGROUP_ENCODED_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_CERTGROUP_PARSED_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_CERTGROUP_CERT_PAIR"))
        self.assertFalse(hasattr(Security, "CSSM_CERTGROUP,"))
        self.assertFalse(hasattr(Security, "CSSM_BASE_CERTS"))
        self.assertFalse(hasattr(Security, "CSSM_ACCESS_CREDENTIALS"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_ANY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_THRESHOLD"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME"))
        self.assertFalse(
            hasattr(Security, "CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START")
        )
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_ANY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_LOGIN"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_GENKEY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_SIGN"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_ENCRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DECRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_MAC"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DERIVE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DBS_CREATE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DBS_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DB_READ"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DB_INSERT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DB_MODIFY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_DB_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_EDIT_MODE_ADD"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_EDIT_MODE_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_EDIT_MODE_REPLACE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYHEADER_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_REFERENCE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_OTHER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_PKCS1"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_PKCS3"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_MSCAPI"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_PGP"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_FIPS186"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_BSAFE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_CCA"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_PKCS8"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_SPKI"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_OTHER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_REF_FORMAT_INTEGER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_REF_FORMAT_STRING"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_REF_FORMAT_SPKI"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_REF_FORMAT_OTHER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYCLASS_PUBLIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_KEYCLASS_PRIVATE_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_KEYCLASS_SESSION_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_KEYCLASS_SECRET_PART"))
        self.assertFalse(hasattr(Security, "CSSM_KEYCLASS_OTHER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_RETURN_DEFAULT"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_RETURN_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_RETURN_REF"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_RETURN_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_PERMANENT"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_PRIVATE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_MODIFIABLE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_SENSITIVE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_EXTRACTABLE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_ALWAYS_SENSITIVE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_NEVER_EXTRACTABLE"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_ANY"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_ENCRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_DECRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_SIGN"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_VERIFY"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_SIGN_RECOVER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_VERIFY_RECOVER"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_WRAP"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_UNWRAP"))
        self.assertFalse(hasattr(Security, "CSSM_KEYUSE_DERIVE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_DH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_KEA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD2"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD4"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_NHASH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_HAVAL"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RIPEMD"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_IBCHASH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RIPEMAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_DES"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_DESX"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RDES"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_3KEY_EDE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_2KEY_EDE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_1KEY_EEE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_3KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_3KEY_EEE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_2KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_2KEY_EEE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES_1KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_IDEA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RC2"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RC5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RC4"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SEAL"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_CAST"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_BLOWFISH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SKIPJACK"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_LUCIFER"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MADRYGA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FEAL"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_REDOC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_REDOC3"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_LOKI"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_KHUFU"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_KHAFRE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MMB"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_GOST"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SAFER"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_CRAB"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_DSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD5WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD2WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ElGamal"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD2Random"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD5Random"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHARandom"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_DESRandom"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_CDMF"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_CAST3"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_CAST5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_GenericSecret"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ConcatBaseAndKey"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ConcatKeyAndBase"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ConcatBaseAndData"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ConcatDataAndBase"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_XORBaseAndData"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ExtractFromKey"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3PreMasterGen"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3PrePrimaryGen"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3PrimaryDerive"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3MasterDerive"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3KeyAndMacDerive"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3MD5_MAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3SHA1_MAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS5_PBKDF1_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS5_PBKDF1_MD2"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS5_PBKDF1_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_WrapLynks"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_WrapSET_OAEP"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_BATON"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MAYFLY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_JUNIPER"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FASTHASH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_3DES"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3MD5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SSL3SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FortezzaTimestamp"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1WithDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1WithECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_DSA_BSAFE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECDH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECMQV"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS12_SHA1_PBE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECNRA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1WithECNRA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECES"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECAES"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1HMAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FIPS186Random"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MQV"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_NRA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_IntelPlatformRandom"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_UTC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_HAVAL3"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_HAVAL4"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_HAVAL5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_TIGER"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_MD5HMAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS5_PBKDF2"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_RUNNING_COUNTER"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_VENDOR_DEFINED"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_ECB"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_ECBPad"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBC_IV8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBCPadIV8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CFB"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CFB_IV8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CFBPadIV8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_OFB"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_OFB_IV8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_OFBPadIV8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_COUNTER"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_BC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PCBC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBCC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_OFBNLF"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PBC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PFB"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBCPD"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PUBLIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PRIVATE_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_SHUFFLE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_ECB64"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBC64"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_OFB64"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CFB32"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CFB16"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CFB8"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_WRAP"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PRIVATE_WRAP"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_RELAYX"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_ECB128"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_ECB96"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_CBC128"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_OAEP_HASH"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PKCS1_EME_V15"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PKCS1_EME_OAEP"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_PKCS1_EMSA_V15"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_ISO_9796"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_X9_31"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_ALGMODE_VENDOR_DEFINED"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_SOFTWARE"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_HARDWARE"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_HYBRID"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_SIGNATURE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_SYMMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_DIGEST"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_RANDOMGEN"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_UNIQUEGEN"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_MAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_ASYMMETRIC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_KEYGEN"))
        self.assertFalse(hasattr(Security, "CSSM_ALGCLASS_DERIVEKEY"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_UINT32"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_CSSM_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_CRYPTO_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_STRING"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_DATE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_RANGE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DATA_KR_PROFILE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_TYPE_MASK"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DESCRIPTION"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_INIT_VECTOR"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_SALT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PADDING"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_RANDOM"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_SEED"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PASSPHRASE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KEY_LENGTH"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KEY_LENGTH_RANGE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_BLOCK_SIZE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_OUTPUT_SIZE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ROUNDS"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_IV_SIZE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ALG_PARAMS"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_LABEL"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KEY_TYPE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_MODE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_EFFECTIVE_BITS"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_START_DATE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_END_DATE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KEYUSAGE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KEYATTR"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PRIME"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_BASE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_SUBPRIME"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ALG_ID"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ITERATION_COUNT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ROUNDS_RANGE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KRPROFILE_LOCAL"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_KRPROFILE_REMOTE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_CSP_HANDLE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_DL_DB_HANDLE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ACCESS_CREDENTIALS"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_ZERO"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_ONE"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_ALTERNATE"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_FF"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_PKCS5"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_PKCS7"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_CIPHERSTEALING"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_RANDOM"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_PKCS1"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_SIGRAW"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_VENDOR_DEFINED"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_RNG"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_CLOCK_EXISTS"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_RDR_TOKENPRESENT"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_RDR_EXISTS"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_RDR_HW"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_WRITE_PROTECTED"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_LOGIN_REQUIRED"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_USER_PIN_INITIALIZED"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_PROT_AUTHENTICATION"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_USER_PIN_EXPIRED"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_SESSION_KEY_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_STORES_PRIVATE_KEYS"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_STORES_PUBLIC_KEYS"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_STORES_SESSION_KEYS"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_STORES_CERTIFICATES"))
        self.assertFalse(hasattr(Security, "CSSM_CSP_STORES_GENERIC"))
        self.assertFalse(hasattr(Security, "CSSM_PKCS_OAEP_MGF_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_PKCS_OAEP_MGF1_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_PKCS_OAEP_MGF1_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_PKCS_OAEP_PSOURCE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_PKCS_OAEP_PSOURCE_Pspecified"))
        self.assertFalse(hasattr(Security, "CSSM_VALUE_NOT_AVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTISSUE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTRESUME"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER"))
        self.assertFalse(hasattr(Security, "CSSM_TP_AUTHORITY_REQUEST_CRLISSUE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_KEY_ARCHIVE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERT_PUBLISH"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERT_NOTIFY_RENEW"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERT_DIR_UPDATE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRL_DISTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_DEFAULT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_STOP_ON_POLICY"))
        self.assertFalse(hasattr(Security, "CSSM_TP_STOP_ON_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_STOP_ON_FIRST_PASS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_STOP_ON_FIRST_FAIL"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_COMPLEX"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_OID_NAMED"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_TUPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_MULTIPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_PARSE_FORMAT_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_CL_CUSTOM_CRL_PARSE_FORMAT"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_TYPE_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_TYPE_X_509v1"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_TYPE_X_509v2"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_TYPE_SPKI"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_TYPE_MULTIPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_BER"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_DER"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_BLOOM"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_CRL_ENCODING_MULTIPLE"))
        self.assertFalse(hasattr(Security, "CSSM_CRLGROUP_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_CRLGROUP_ENCODED_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_CRLGROUP_PARSED_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_CRLGROUP_CRL_PAIR"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_UNSPECIFIC"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_CERT_ID"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_CRL_ID"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_VERIFIER_TIME"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_CRL_THISTIME"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_CRL_NEXTTIME"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_POLICYINFO"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_TUPLEGROUP"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CONFIRM_STATUS_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CONFIRM_ACCEPT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CONFIRM_REJECT"))
        self.assertFalse(hasattr(Security, "CSSM_ESTIMATED_TIME_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_ELAPSED_TIME_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_ELAPSED_TIME_COMPLETE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_STATUS_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_OK"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_OKWITHCERTMODS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_OKWITHSERVICEMODS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_REJECTED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_NOT_AUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTISSUE_WILL_BE_REVOKED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REVOKE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_HOLD"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_RELEASE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_SUPERCEDED"))
        self.assertFalse(
            hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE")
        )
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_STATUS_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_OK"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_OKWITHNEWTIME"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_WRONGCA"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_REJECTED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTCHANGE_NOT_AUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_VALID"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_REVOKED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_SUSPENDED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_EXPIRED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_NOT_VALID_YET"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_AUTHORITY"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_SIGNATURE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_CERTGROUP"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_POLICY"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS"))
        self.assertFalse(
            hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS")
        )
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_INVALID_NAME_TREE"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTNOTARIZE_OK"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTNOTARIZE_REJECTED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTRECLAIM_OK"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTRECLAIM_NOMATCH"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTRECLAIM_REJECTED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_STATUS_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_OK"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_NOT_CURRENT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_INVALID_DOMAIN"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_REJECTED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_CRLISSUE_NOT_AUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_FORM_TYPE_GENERIC"))
        self.assertFalse(hasattr(Security, "CSSM_TP_FORM_TYPE_REGISTRATION"))
        self.assertFalse(hasattr(Security, "CSSM_CL_TEMPLATE_INTERMEDIATE_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA"))
        self.assertFalse(
            hasattr(Security, "CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA")
        )
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_PKCS12"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_PFX"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_SPKI_SEQUENCE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_PGP_KEYRING"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_LAST"))
        self.assertFalse(hasattr(Security, "CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_ENCODING_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_ENCODING_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_ENCODING_BER"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_ENCODING_DER"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_ENCODING_SEXPR"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_BUNDLE_ENCODING_PGP"))
        self.assertFalse(hasattr(Security, "CSSM_FIELDVALUE_COMPLEX_DATA_TYPE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_NAME_AS_STRING"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_NAME_AS_OID"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_STRING"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_SINT32"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_UINT32"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_REAL"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_BLOB"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX"))
        self.assertFalse(hasattr(Security, "CSSM_DB_RECORDTYPE_SCHEMA_START"))
        self.assertFalse(hasattr(Security, "CSSM_DB_RECORDTYPE_SCHEMA_END"))
        self.assertFalse(hasattr(Security, "CSSM_DB_RECORDTYPE_OPEN_GROUP_START"))
        self.assertFalse(hasattr(Security, "CSSM_DB_RECORDTYPE_OPEN_GROUP_END"))
        self.assertFalse(hasattr(Security, "CSSM_DB_RECORDTYPE_APP_DEFINED_START"))
        self.assertFalse(hasattr(Security, "CSSM_DB_RECORDTYPE_APP_DEFINED_END"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_SCHEMA_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_SCHEMA_INDEXES"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_SCHEMA_ATTRIBUTES"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_SCHEMA_PARSING_MODULE"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_ANY"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_POLICY"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_GENERIC"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_PUBLIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_PRIVATE_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_SYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_ALL_KEYS"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CERT_USE_TRUSTED"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CERT_USE_SYSTEM"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CERT_USE_OWNER"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CERT_USE_REVOKED"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CERT_USE_SIGNING"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CERT_USE_PRIVACY"))
        self.assertFalse(hasattr(Security, "CSSM_DB_INDEX_UNIQUE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_INDEX_NONUNIQUE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_INDEX_ON_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_DB_INDEX_ON_ATTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_INDEX_ON_RECORD"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ACCESS_READ"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ACCESS_WRITE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ACCESS_PRIVILEGED"))
        self.assertFalse(hasattr(Security, "CSSM_DB_MODIFY_ATTRIBUTE_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_MODIFY_ATTRIBUTE_ADD"))
        self.assertFalse(hasattr(Security, "CSSM_DB_MODIFY_ATTRIBUTE_DELETE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_MODIFY_ATTRIBUTE_REPLACE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_EQUAL"))
        self.assertFalse(hasattr(Security, "CSSM_DB_NOT_EQUAL"))
        self.assertFalse(hasattr(Security, "CSSM_DB_LESS_THAN"))
        self.assertFalse(hasattr(Security, "CSSM_DB_GREATER_THAN"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CONTAINS"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CONTAINS_INITIAL_SUBSTRING"))
        self.assertFalse(hasattr(Security, "CSSM_DB_CONTAINS_FINAL_SUBSTRING"))
        self.assertFalse(hasattr(Security, "CSSM_DB_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_AND"))
        self.assertFalse(hasattr(Security, "CSSM_DB_OR"))
        self.assertFalse(hasattr(Security, "CSSM_QUERY_TIMELIMIT_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_QUERY_SIZELIMIT_NONE"))
        self.assertFalse(hasattr(Security, "CSSM_QUERY_RETURN_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_DL_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_DL_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_DL_LDAP"))
        self.assertFalse(hasattr(Security, "CSSM_DL_ODBC"))
        self.assertFalse(hasattr(Security, "CSSM_DL_PKCS11"))
        self.assertFalse(hasattr(Security, "CSSM_DL_FFS"))
        self.assertFalse(hasattr(Security, "CSSM_DL_MEMORY"))
        self.assertFalse(hasattr(Security, "CSSM_DL_REMOTEDIR"))
        self.assertFalse(hasattr(Security, "CSSM_DB_DATASTORES_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_NAME_LIST"))
        self.assertFalse(hasattr(Security, "CSSM_DB_TRANSACTIONAL_MODE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_FILESYSTEMSCAN_MODE"))
        self.assertFalse(hasattr(Security, "CSSM_DB_SCHEMA_ATTRIBUTE_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_DB_SCHEMA_INDEX_INFO"))
