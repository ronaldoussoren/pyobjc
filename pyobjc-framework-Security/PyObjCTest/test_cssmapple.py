import Security
from PyObjCTools.TestSupport import TestCase


class TestMDS(TestCase):
    def test_unsuppported(self):
        self.assertFalse(hasattr(Security, "gGuidCssm"))
        self.assertFalse(hasattr(Security, "gGuidAppleFileDL"))
        self.assertFalse(hasattr(Security, "gGuidAppleCSP"))
        self.assertFalse(hasattr(Security, "gGuidAppleCSPDL"))
        self.assertFalse(hasattr(Security, "gGuidAppleX509CL"))
        self.assertFalse(hasattr(Security, "gGuidAppleX509TP"))
        self.assertFalse(hasattr(Security, "gGuidAppleLDAPDL"))
        self.assertFalse(hasattr(Security, "gGuidAppleDotMacTP"))
        self.assertFalse(hasattr(Security, "gGuidAppleSdCSPDL"))
        self.assertFalse(hasattr(Security, "gGuidAppleDotMacDL"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEYCHAIN_PROMPT"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEYCHAIN_LOCK"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEYCHAIN_CHANGE_LOCK"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PROCESS"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID__RESERVED_1"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_SYSTEM"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PIN"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PREAUTH"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PREAUTH_SOURCE"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_ASYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_PARTITION"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID_KEYBAG_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_WORDID__FIRST_UNUSED"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PROCESS"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_COMMENT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PREAUTH"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_SUBJECT_TYPE_PARTITION"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PROCESS"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_COMMENT"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_RETRY_ID"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_SYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_PREAUTH"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_SAMPLE_TYPE_KEYBAG_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_CHANGE_ACL"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_CHANGE_OWNER"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_PARTITION_ID"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_INTEGRITY"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_PREAUTH_BASE"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_PREAUTH_END"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_PREAUTH"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_PREAUTH_SLOT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_AUTHORIZATION_IS_PREAUTH"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_CODE_SIGNATURE_INVALID"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_CODE_SIGNATURE_OSX"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_MATCH_UID"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_MATCH_GID"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_MATCH_HONOR_ROOT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_MATCH_BITS"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_PROCESS_SUBJECT_SELECTOR"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION"))
        self.assertFalse(
            hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE")
        )
        self.assertFalse(hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_INVALID"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_PREAUTH_TRACKING_BLOCKED"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_PREAUTH_TRACKING_UNKNOWN"))
        self.assertFalse(hasattr(Security, "CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSM_DB_ACCESS_RESET"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_APPLE_YARROW"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_AES"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FEE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FEE_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FEE_SHA1"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FEED"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_FEEDEXP"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ASC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA1HMAC_LEGACY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_KEYCHAIN_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS12_PBE_ENCR"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PKCS12_PBE_MAC"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SECURE_PASSPHRASE"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_PBE_OPENSSL_MD5"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA256"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA384"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA512"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ENTROPY_DEFAULT"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA224"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA224WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA256WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA384WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA512WithRSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_OPENSSH1"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA224WithECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA256WithECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA384WithECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_SHA512WithECDSA"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECDSA_SPECIFIED"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID_ECDH_X963_KDF"))
        self.assertFalse(hasattr(Security, "CSSM_ALGID__FIRST_UNUSED"))
        self.assertFalse(hasattr(Security, "CSSM_PADDING_APPLE_SSLv2"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_X509"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_OPENSSH"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_OPENSSL"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2"))
        self.assertFalse(hasattr(Security, "CSSM_CUSTOM_COMMON_ERROR_EXTENT"))
        self.assertFalse(hasattr(Security, "CSSM_ERRCODE_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSM_ERRCODE_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSM_ERRCODE_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(
            hasattr(Security, "CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(hasattr(Security, "CSSM_ERRCODE_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSM_ERRCODE_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSM_ERRCODE_IN_DARK_WAKE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSSM_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSMERR_AC_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSMERR_CL_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSMERR_DL_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSMERR_TP_NO_USER_INTERACTION"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSSM_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSMERR_AC_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSMERR_CL_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSMERR_DL_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSMERR_TP_USER_CANCELED"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSSM_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSMERR_AC_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CL_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSMERR_DL_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSMERR_TP_SERVICE_NOT_AVAILABLE"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_CSSM_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSMERR_AC_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSMERR_CL_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSMERR_DL_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSMERR_TP_DEVICE_RESET"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSSM_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSMERR_AC_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSMERR_CL_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSMERR_DL_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSMERR_TP_DEVICE_FAILED"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSSM_IN_DARK_WAKE"))
        self.assertFalse(hasattr(Security, "CSSMERR_AC_IN_DARK_WAKE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_IN_DARK_WAKE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CL_IN_DARK_WAKE"))
        self.assertFalse(hasattr(Security, "CSSMERR_DL_IN_DARK_WAKE"))
        self.assertFalse(hasattr(Security, "CSSMERR_TP_IN_DARK_WAKE"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR"))
        self.assertFalse(hasattr(Security, "CSSMERR_CSP_APPLE_SSLv2_ROLLBACK"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_GENERIC_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_INTERNET_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_X509_CERTIFICATE"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_USER_TRUST"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_X509_CRL"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_UNLOCK_REFERRAL"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE"))
        self.assertFalse(hasattr(Security, "CSSM_DL_DB_RECORD_METADATA"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_COMMIT"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_ROLLBACK"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_TAKE_FILE_LOCK"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_MAKE_BACKUP"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_MAKE_COPY"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEFILEDL_DELETE_FILE"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_UNLOCK_TYPE_KEYBAG"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_DISK_FULL"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_QUOTA_EXCEEDED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_FILE_TOO_BIG"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_INVALID_DATABASE_BLOB"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_INVALID_KEY_BLOB"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_HOSTNAME_MISMATCH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_CA"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_AUTHORITY_ID"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_SUBJECT_ID"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_KEY_USAGE"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_ID_LINKAGE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_PATH_LEN_CONSTRAINT"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_ROOT"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_EXPIRED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_NOT_FOUND"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_SERVER_DOWN"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_BAD_URI"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_NOT_TRUSTED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CRL_POLICY_FAIL"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_IDP_FAIL"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_SMIME_BAD_KEY_USE"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_BAD_RESPONSE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_BAD_REQUEST"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_UNAVAILABLE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_NETWORK_FAILURE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_NOT_TRUSTED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_SIG_ERROR"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_NO_SIGNER"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_RESP_TRY_LATER"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_OCSP_NONCE_MISMATCH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CS_BAD_PATH_LENGTH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_TRUST_SETTING_DENY"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_IDENTIFIER_MISSING"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_CA_PIN_MISMATCH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_QUEUED"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_REDIRECT"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST")
        )
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR")
        )
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL"))
        self.assertFalse(
            hasattr(Security, "CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK")
        )
        self.assertFalse(hasattr(Security, "CSSM_APPLEDL_OPEN_PARAMETERS_VERSION"))
        self.assertFalse(hasattr(Security, "kCSSM_APPLEDL_MASK_MODE"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEDL_OPEN_PARAMETERS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_LOCK"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_UNLOCK"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_GET_SETTINGS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_SET_SETTINGS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_IS_LOCKED"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_CHANGE_PASSWORD"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_GET_HANDLE"))
        self.assertFalse(hasattr(Security, "CSSM_APPLESCPDL_CSP_GET_KEYHANDLE"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_8"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_9"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_10"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_11"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_12"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_13"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_14"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_15"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_16"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_17"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_18"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_19"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_20"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_21"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_22"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_23"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_24"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_25"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_26"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_27"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_PRIVATE_CSPDL_CODE_28"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSP_KEYDIGEST"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS"))
        self.assertFalse(
            hasattr(Security, "CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS")
        )
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL"))
        self.assertFalse(hasattr(Security, "CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_VENDOR_DEFINED"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PUBLIC_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_FEE_PRIME_TYPE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_FEE_CURVE_TYPE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ASC_OPTIMIZATION"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_RSA_BLINDING"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PARAM_KEY"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_PROMPT"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_ALERT_TITLE"))
        self.assertFalse(hasattr(Security, "CSSM_ATTRIBUTE_VERIFY_PASSPHRASE"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_PRIME_TYPE_DEFAULT"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_PRIME_TYPE_MERSENNE"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_PRIME_TYPE_FEE"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_PRIME_TYPE_GENERAL"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_CURVE_TYPE_DEFAULT"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_CURVE_TYPE_MONTGOMERY"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_CURVE_TYPE_WEIERSTRASS"))
        self.assertFalse(hasattr(Security, "CSSM_FEE_CURVE_TYPE_ANSI_X9_62"))
        self.assertFalse(hasattr(Security, "CSSM_ASC_OPTIMIZE_DEFAULT"))
        self.assertFalse(hasattr(Security, "CSSM_ASC_OPTIMIZE_SIZE"))
        self.assertFalse(hasattr(Security, "CSSM_ASC_OPTIMIZE_SECURITY"))
        self.assertFalse(hasattr(Security, "CSSM_ASC_OPTIMIZE_TIME"))
        self.assertFalse(hasattr(Security, "CSSM_ASC_OPTIMIZE_TIME_SIZE"))
        self.assertFalse(hasattr(Security, "CSSM_ASC_OPTIMIZE_ASCII"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_PARTIAL"))
        self.assertFalse(hasattr(Security, "CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_NAME_OID"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_CERT_REQUEST"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_SSL_OPTS_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_SSL_CLIENT"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_SSL_OPTIONS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_CRL_OPTS_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_FETCH_CRL_FROM_NET"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_CRL_SUFFICIENT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_CRL_OPTIONS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_SMIME_OPTS_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_SMIME_OPTIONS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_ALLOW_EXPIRED"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_LEAF_IS_CA"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_FETCH_CERT_FROM_NET"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_REQUIRE_REV_PER_CERT"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_TRUST_SETTINGS"))
        self.assertFalse(hasattr(Security, "CSSM_TP_ACTION_IMPLICIT_ANCHORS"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_ACTION_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_TP_ACTION_DATA"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_EXPIRED"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_NOT_VALID_YET"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_IS_IN_INPUT_CERTS"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_IS_IN_ANCHORS"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_IS_ROOT"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_IS_FROM_NET"))
        self.assertFalse(
            hasattr(Security, "CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER")
        )
        self.assertFalse(
            hasattr(Security, "CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN")
        )
        self.assertFalse(
            hasattr(Security, "CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM")
        )
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST"))
        self.assertFalse(hasattr(Security, "CSSM_CERT_STATUS_TRUST_SETTINGS_DENY"))
        self.assertFalse(
            hasattr(Security, "CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR")
        )
        self.assertFalse(hasattr(Security, "CSSM_TP_APPLE_EVIDENCE_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_TP_APPLE_EVIDENCE_VERSION"))
        self.assertFalse(hasattr(Security, "CSSM_TP_APPLE_EVIDENCE_HEADER"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_APPLE_CUSTOM"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_APPLE_HEADER"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_APPLE_CERTGROUP"))
        self.assertFalse(hasattr(Security, "CSSM_EVIDENCE_FORM_APPLE_CERT_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEX509CL_OBTAIN_CSR"))
        self.assertFalse(hasattr(Security, "CSSM_APPLEX509CL_VERIFY_CSR"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_CL_CSR_REQUEST"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_CRL_END_OF_TIME"))
        self.assertFalse(hasattr(Security, "kKeychainSuffix"))
        self.assertFalse(hasattr(Security, "kKeychainDbSuffix"))
        self.assertFalse(hasattr(Security, "kSystemKeychainName"))
        self.assertFalse(hasattr(Security, "kSystemKeychainDir"))
        self.assertFalse(hasattr(Security, "kSystemKeychainPath"))
        self.assertFalse(hasattr(Security, "kSystemUnlockFile"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_ACL_TAG_PARTITION_ID"))
        self.assertFalse(hasattr(Security, "CSSM_APPLE_ACL_TAG_INTEGRITY"))
        self.assertFalse(hasattr(Security, "cssmPerror"))
        self.assertFalse(hasattr(Security, "cssmOidToAlg"))
        self.assertFalse(hasattr(Security, "cssmAlgToOid"))
        self.assertFalse(hasattr(Security, "errSecErrnoBase"))
        self.assertFalse(hasattr(Security, "errSecErrnoLimit"))
        self.assertFalse(hasattr(Security, "CSSMERR_APPLETP_LEAF_PIN_MISMATCH"))
