import CoreServices
from PyObjCTools.TestSupport import TestCase


class TestAliases(TestCase):
    def assert_not_wrapped(self, name):
        self.assertTrue(not hasattr(CoreServices, name), f"{name!r} exposed in bindings")

    def test_not_wrapped(self):
        self.assert_not_wrapped("kFSAliasInfoNone")
        self.assert_not_wrapped("kFSAliasInfoVolumeCreateDate")
        self.assert_not_wrapped("kFSAliasInfoTargetCreateDate")
        self.assert_not_wrapped("kFSAliasInfoFinderInfo")
        self.assert_not_wrapped("kFSAliasInfoIsDirectory")
        self.assert_not_wrapped("kFSAliasInfoIDs")
        self.assert_not_wrapped("kFSAliasInfoFSInfo")
        self.assert_not_wrapped("kFSAliasInfoVolumeFlags")
        self.assert_not_wrapped("rAliasType")
        self.assert_not_wrapped("kARMMountVol")
        self.assert_not_wrapped("kARMNoUI")
        self.assert_not_wrapped("kARMMultVols")
        self.assert_not_wrapped("kARMSearch")
        self.assert_not_wrapped("kARMSearchMore")
        self.assert_not_wrapped("kARMSearchRelFirst")
        self.assert_not_wrapped("kARMTryFileIDFirst")
        self.assert_not_wrapped("asiZoneName")
        self.assert_not_wrapped("asiServerName")
        self.assert_not_wrapped("asiVolumeName")
        self.assert_not_wrapped("asiAliasName")
        self.assert_not_wrapped("asiParentName")
        self.assert_not_wrapped("kResolveAliasFileNoUI")
        self.assert_not_wrapped("kResolveAliasTryFileIDFirst")
        self.assert_not_wrapped("AliasRecord;")
        self.assert_not_wrapped("FSAliasInfo;")
        self.assert_not_wrapped("NewAliasFilterUPP")
        self.assert_not_wrapped("DisposeAliasFilterUPP")
        self.assert_not_wrapped("InvokeAliasFilterUPP")
        self.assert_not_wrapped("FSNewAlias")
        self.assert_not_wrapped("FSNewAliasMinimal")
        self.assert_not_wrapped("FSIsAliasFile")
        self.assert_not_wrapped("FSResolveAliasWithMountFlags")
        self.assert_not_wrapped("FSResolveAlias")
        self.assert_not_wrapped("FSResolveAliasFileWithMountFlags")
        self.assert_not_wrapped("FSResolveAliasFile")
        self.assert_not_wrapped("FSFollowFinderAlias")
        self.assert_not_wrapped("FSUpdateAlias")
        self.assert_not_wrapped("FSNewAliasUnicode")
        self.assert_not_wrapped("FSNewAliasMinimalUnicode")
        self.assert_not_wrapped("FSNewAliasFromPath")
        self.assert_not_wrapped("FSMatchAliasBulk")
        self.assert_not_wrapped("FSCopyAliasInfo")
        self.assert_not_wrapped("GetAliasSize")
        self.assert_not_wrapped("GetAliasUserType")
        self.assert_not_wrapped("SetAliasUserType")
        self.assert_not_wrapped("GetAliasSizeFromPtr")
        self.assert_not_wrapped("GetAliasUserTypeFromPtr")
        self.assert_not_wrapped("SetAliasUserTypeWithPtr")
        self.assert_not_wrapped("FSMatchAlias")
        self.assert_not_wrapped("FSMatchAliasNoUI")
        self.assert_not_wrapped("NewAlias")
        self.assert_not_wrapped("NewAliasMinimal")
        self.assert_not_wrapped("NewAliasMinimalFromFullPath")
        self.assert_not_wrapped("ResolveAlias")
        self.assert_not_wrapped("GetAliasInfo")
        self.assert_not_wrapped("IsAliasFile")
        self.assert_not_wrapped("ResolveAliasWithMountFlags")
        self.assert_not_wrapped("ResolveAliasFile")
        self.assert_not_wrapped("ResolveAliasFileWithMountFlags")
        self.assert_not_wrapped("FollowFinderAlias")
        self.assert_not_wrapped("UpdateAlias")
        self.assert_not_wrapped("MatchAlias")
        self.assert_not_wrapped("ResolveAliasFileWithMountFlagsNoUI")
        self.assert_not_wrapped("MatchAliasNoUI")
