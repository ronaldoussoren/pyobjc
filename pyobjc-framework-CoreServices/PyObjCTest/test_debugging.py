import CoreServices
from PyObjCTools.TestSupport import TestCase


class TestDebugging(TestCase):
    def assert_not_wrapped(self, name):
        self.assertTrue(not hasattr(CoreServices, name), f"{name!r} exposed in bindings")

    def test_not_wrapped(self):
        self.assert_not_wrapped("kComponentSignatureString")
        self.assert_not_wrapped("COMPONENT_SIGNATURE")
        self.assert_not_wrapped("DEBUG_LEVEL_PRODUCTION")
        self.assert_not_wrapped("DEBUG_LEVEL_BREAK_ONLY")
        self.assert_not_wrapped("DEBUG_LEVEL_EXTERNAL")
        self.assert_not_wrapped("DEBUG_LEVEL_INTERNAL")
        self.assert_not_wrapped("DEBUGFULL")
        self.assert_not_wrapped("DEBUGLEVEL DEBUG_LEVEL_PRODUCTION")
        self.assert_not_wrapped("DEBUG_NO_OPTIONS")
        self.assert_not_wrapped("DEBUGASSERTMSG")
        self.assert_not_wrapped("DEBUG_ASSERT_COMPONENT_NAME_STRING")
        self.assert_not_wrapped("DEBUG_ASSERT_PRODUCTION_CODE")
        self.assert_not_wrapped("DEBUG_ASSERT_MESSAGE")
        self.assert_not_wrapped("ATTASKLEVEL0")
        self.assert_not_wrapped("check_tasklevel0")
        self.assert_not_wrapped("check_tasklevel0_string")
        self.assert_not_wrapped("verify_tasklevel0")
        self.assert_not_wrapped("verify_tasklevel0_string")
        self.assert_not_wrapped("require_tasklevel0")
        self.assert_not_wrapped("require_tasklevel0_action")
        self.assert_not_wrapped("require_tasklevel0_quiet")
        self.assert_not_wrapped("require_tasklevel0_action_quiet")
        self.assert_not_wrapped("require_tasklevel0_string")
        self.assert_not_wrapped("require_tasklevel0_action_string")
        self.assert_not_wrapped("DPRINTF")
        self.assert_not_wrapped("kBlessedBusErrorBait")
        self.assert_not_wrapped("DebugAssert")
        self.assert_not_wrapped("k68kInterruptLevelMask")
        self.assert_not_wrapped("kInVBLTaskMask")
        self.assert_not_wrapped("kInDeferredTaskMask")
        self.assert_not_wrapped("kInSecondaryIntHandlerMask")
        self.assert_not_wrapped("kInNestedInterruptMask")
        self.assert_not_wrapped("TaskLeve")
        self.assert_not_wrapped("kComponentDebugOption")
        self.assert_not_wrapped("kGetDebugOption")
        self.assert_not_wrapped("NewDebugComponent")
        self.assert_not_wrapped("NewDebugOption")
        self.assert_not_wrapped("DisposeDebugComponent")
        self.assert_not_wrapped("GetDebugComponentInfo")
        self.assert_not_wrapped("GetDebugOptionInfo")
        self.assert_not_wrapped("SetDebugOptionValue")
        self.assert_not_wrapped("InstallDebugAssertOutputHandler")
        self.assert_not_wrapped("GetMacOSStatusErrorString")
        self.assert_not_wrapped("GetMacOSStatusCommentString")
        self.assert_not_wrapped("NewDebugComponentCallbackUPP")
        self.assert_not_wrapped("NewDebugAssertOutputHandlerUPP")
        self.assert_not_wrapped("DisposeDebugComponentCallbackUPP")
        self.assert_not_wrapped("DisposeDebugAssertOutputHandlerUPP")
        self.assert_not_wrapped("InvokeDebugComponentCallbackUPP")
        self.assert_not_wrapped("InvokeDebugAssertOutputHandlerUPP")
        self.assert_not_wrapped("NewDebugComponentCallbackUPP")
        self.assert_not_wrapped("NewDebugAssertOutputHandlerUPP")
        self.assert_not_wrapped("DisposeDebugComponentCallbackUPP")
        self.assert_not_wrapped("DisposeDebugAssertOutputHandlerUPP")
        self.assert_not_wrapped("InvokeDebugComponentCallbackUPP")
        self.assert_not_wrapped("InvokeDebugAssertOutputHandlerUPP")
