import CoreServices
from PyObjCTools.TestSupport import TestCase


class TestMixedMode(TestCase):
    def assert_not_wrapped(self, name):
        self.assertTrue(not hasattr(CoreServices, name), f"{name!r} exposed in bindings")

    def test_not_wrapped(self):
        self.assert_not_wrapped("kRoutineDescriptorVersion")
        self.assert_not_wrapped("_MixedModeMagic")
        self.assert_not_wrapped("kCurrentMixedModeStateRecord")
        self.assert_not_wrapped("kPascalStackBased")
        self.assert_not_wrapped("kCStackBased")
        self.assert_not_wrapped("kRegisterBased")
        self.assert_not_wrapped("kD0DispatchedPascalStackBased")
        self.assert_not_wrapped("kD1DispatchedPascalStackBased")
        self.assert_not_wrapped("kD0DispatchedCStackBased")
        self.assert_not_wrapped("kStackDispatchedPascalStackBased")
        self.assert_not_wrapped("kThinkCStackBased")
        self.assert_not_wrapped("kM68kISA")
        self.assert_not_wrapped("kPowerPCISA")
        self.assert_not_wrapped("kX86ISA")
        self.assert_not_wrapped("kOld68kRTA")
        self.assert_not_wrapped("kPowerPCRTA")
        self.assert_not_wrapped("kCFM68kRTA")
        self.assert_not_wrapped("kX86RTA")
        self.assert_not_wrapped("GetCurrentISA")
        self.assert_not_wrapped("GetCurrentRTA")
        self.assert_not_wrapped("GetCurrentArchitecture")
        self.assert_not_wrapped("GetCurrentArchitecture")
        self.assert_not_wrapped("kRegisterD0")
        self.assert_not_wrapped("kRegisterD1")
        self.assert_not_wrapped("kRegisterD2")
        self.assert_not_wrapped("kRegisterD3")
        self.assert_not_wrapped("kRegisterD4")
        self.assert_not_wrapped("kRegisterD5")
        self.assert_not_wrapped("kRegisterD6")
        self.assert_not_wrapped("kRegisterD7")
        self.assert_not_wrapped("kRegisterA0")
        self.assert_not_wrapped("kRegisterA1")
        self.assert_not_wrapped("kRegisterA2")
        self.assert_not_wrapped("kRegisterA3")
        self.assert_not_wrapped("kRegisterA4")
        self.assert_not_wrapped("kRegisterA5")
        self.assert_not_wrapped("kRegisterA6")
        self.assert_not_wrapped("kCCRegisterCBit")
        self.assert_not_wrapped("kCCRegisterVBit")
        self.assert_not_wrapped("kCCRegisterZBit")
        self.assert_not_wrapped("kCCRegisterNBit")
        self.assert_not_wrapped("kCCRegisterXBit")
        self.assert_not_wrapped("kNoByteCode")
        self.assert_not_wrapped("kOneByteCode")
        self.assert_not_wrapped("kTwoByteCode")
        self.assert_not_wrapped("kFourByteCode")
        self.assert_not_wrapped("kProcDescriptorIsAbsolute")
        self.assert_not_wrapped("kProcDescriptorIsRelative")
        self.assert_not_wrapped("kFragmentIsPrepared")
        self.assert_not_wrapped("kFragmentNeedsPreparing")
        self.assert_not_wrapped("kUseCurrentISA")
        self.assert_not_wrapped("kUseNativeISA")
        self.assert_not_wrapped("kPassSelector")
        self.assert_not_wrapped("kDontPassSelector")
        self.assert_not_wrapped("kRoutineIsNotDispatchedDefaultRoutine")
        self.assert_not_wrapped("kRoutineIsDispatchedDefaultRoutine")
        self.assert_not_wrapped("kProcDescriptorIsProcPtr")
        self.assert_not_wrapped("kProcDescriptorIsIndex")
        self.assert_not_wrapped("RoutineRecord")
        self.assert_not_wrapped("kSelectorsAreNotIndexable")
        self.assert_not_wrapped("kSelectorsAreIndexable")
        self.assert_not_wrapped("RoutineDescriptor")
        self.assert_not_wrapped("MixedModeStateRecord")
        self.assert_not_wrapped("NewRoutineDescriptor")
        self.assert_not_wrapped("DisposeRoutineDescriptor")
        self.assert_not_wrapped("kCallingConventionWidth")
        self.assert_not_wrapped("kCallingConventionPhase")
        self.assert_not_wrapped("kCallingConventionMask")
        self.assert_not_wrapped("kResultSizeWidth")
        self.assert_not_wrapped("kResultSizePhase")
        self.assert_not_wrapped("kResultSizeMask")
        self.assert_not_wrapped("kStackParameterWidth")
        self.assert_not_wrapped("kStackParameterPhase")
        self.assert_not_wrapped("kStackParameterMask")
        self.assert_not_wrapped("kRegisterResultLocationWidth")
        self.assert_not_wrapped("kRegisterResultLocationPhase")
        self.assert_not_wrapped("kRegisterParameterWidth")
        self.assert_not_wrapped("kRegisterParameterPhase")
        self.assert_not_wrapped("kRegisterParameterMask")
        self.assert_not_wrapped("kRegisterParameterSizePhase")
        self.assert_not_wrapped("kRegisterParameterSizeWidth")
        self.assert_not_wrapped("kRegisterParameterWhichPhase")
        self.assert_not_wrapped("kRegisterParameterWhichWidth")
        self.assert_not_wrapped("kDispatchedSelectorSizeWidth")
        self.assert_not_wrapped("kDispatchedSelectorSizePhase")
        self.assert_not_wrapped("kDispatchedParameterPhase")
        self.assert_not_wrapped("kSpecialCaseSelectorWidth")
        self.assert_not_wrapped("kSpecialCaseSelectorPhase")
        self.assert_not_wrapped("kSpecialCaseSelectorMask")
        self.assert_not_wrapped("kSpecialCase")
        self.assert_not_wrapped("kSpecialCaseHighHook")
        self.assert_not_wrapped("kSpecialCaseCaretHook")
        self.assert_not_wrapped("kSpecialCaseEOLHook")
        self.assert_not_wrapped("kSpecialCaseWidthHook")
        self.assert_not_wrapped("kSpecialCaseTextWidthHook")
        self.assert_not_wrapped("kSpecialCaseNWidthHook")
        self.assert_not_wrapped("kSpecialCaseDrawHook")
        self.assert_not_wrapped("kSpecialCaseHitTestHook")
        self.assert_not_wrapped("kSpecialCaseTEFindWord")
        self.assert_not_wrapped("kSpecialCaseProtocolHandler")
        self.assert_not_wrapped("kSpecialCaseSocketListener")
        self.assert_not_wrapped("kSpecialCaseTERecalc")
        self.assert_not_wrapped("kSpecialCaseTEDoText")
        self.assert_not_wrapped("kSpecialCaseGNEFilterProc")
        self.assert_not_wrapped("kSpecialCaseMBarHook")
        self.assert_not_wrapped("SIZE_CODE")
        self.assert_not_wrapped("RESULT_SIZE")
        self.assert_not_wrapped("STACK_ROUTINE_PARAMETER")
        self.assert_not_wrapped("DISPATCHED_STACK_ROUTINE_PARAMETER")
        self.assert_not_wrapped("DISPATCHED_STACK_ROUTINE_SELECTOR_SIZE")
        self.assert_not_wrapped("REGISTER_RESULT_LOCATION")
        self.assert_not_wrapped("REGISTER_ROUTINE_PARAMETER")
        self.assert_not_wrapped("SPECIAL_CASE_PROCINFO")
        self.assert_not_wrapped("STACK_UPP_TYPE")
        self.assert_not_wrapped("REGISTER_UPP_TYPE")
        self.assert_not_wrapped("TVECTOR_UPP_TYPE")
        self.assert_not_wrapped("CALL_ZERO_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_ONE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_TWO_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_THREE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_FOUR_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_FIVE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_SIX_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_SEVEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_EIGHT_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_NINE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_TEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_ELEVEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_TWELVE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_THIRTEEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_ZERO_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_ONE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_TWO_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_THREE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_FOUR_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_FIVE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_SIX_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_SEVEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_EIGHT_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_NINE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_TEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_ELEVEN_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_TWELVE_PARAMETER_UPP")
        self.assert_not_wrapped("CALL_THIRTEEN_PARAMETER_UPP")
